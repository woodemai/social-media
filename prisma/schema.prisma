generator client {
  provider = "prisma-client-js"
  previewFeatures = ["tracing"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

enum Role {
  ADMIN
  USER
}

model User {
  id            String    @id @default(cuid())
  name          String?
  bio           String?
  email         String    @unique
  emailVerified DateTime?
  password      String?
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  role          Role      @default(USER)
  accounts      Account[]
  posts         Post[]
  comments      Comment[]

  isPrivate Boolean? @default(false)

  subscribers User[] @relation("subscription")
  subscribed  User[] @relation("subscription")

  likedPost    Post[]    @relation("like")
  likedComment Comment[] @relation("likedComment")

  incomingSubscriptionRequests SubscriptionRequest[] @relation("requestTo")
  outgoingSubscriptionRequests SubscriptionRequest[] @relation("requestBy")
}

enum RequestStatus {
  PENDING
  ACCEPTED
  DECLINED
}

model SubscriptionRequest {
  id String @id @default(cuid())

  requestById String
  requestToId String

  status RequestStatus @default(PENDING)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  requestBy User @relation("requestBy", fields: [requestById], references: [id])
  requestTo User @relation("requestTo", fields: [requestToId], references: [id])

  @@unique([requestById, requestToId])
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt
  user              User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Post {
  id         String   @id @default(cuid())
  body       String
  multimedia String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comments Comment[]

  likedUsers User[] @relation("like")
}

model Comment {
  id String @id @default(cuid())

  body       String
  multimedia String[]

  authorId String
  author   User   @relation(fields: [authorId], references: [id], onDelete: Cascade)

  postId String
  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)

  likedUsers User[] @relation("likedComment")

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt
}
